// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('./SquareVerifier');
const truffleAssert = require('truffle-assertions');

contract('Test SquareVerifier', accounts => {
    describe('test verification', () => {
        beforeEach(async () => {
            this.contract = await SquareVerifier.new({from: accounts[0]});
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps

        it('correct proof', async () => {
            let check_proof_validity = await this.contract.verifyTx.call(
                ["0x1ba0df5159c4c75da8a30d34e28b0a2242b9634aed77c9b41b979e6081ed5033", "0x04a81e18c8c57362b000213bce6d533055ba4f830dc76abf9c5bf37907ffbdd0"],
                [["0x272c1132c59a11b904df2e3921eaf7b40ce948a1a24e9b36dd6e2e04cc3e9560", "0x1535e1e6c5cb4d685ef68595487910d68d8813765f422b977b53e32f8c53fc94"], ["0x26e8a26d9bd754c038c42bb9b5b32b91a0c1463aba53b03eb8e224f1230f853a", "0x2c080f65faca972f26229da56b338fc12d62261f8626ec42659bc1090e7a983d"]],
                ["0x08c833d09a989255fa84bd16e9b4374fbf2c59f92f8b67298771b72c03e56f7f", "0x2f85944aef8c9f217463077e0d8f85fdf5546b3b570820ade0cf9c95a3feb440"],
                ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
            );
            assert.equal(check_proof_validity, true, "correct proof");
        });

        // Test verification with incorrect proof
        it('incorrect proof', async () => {
            let check_proof_validity = await this.contract.verifyTx.call(
                ["0x2fe0382ba55fe351367fe334953c082fa1ccb0c326bd3553905736cf83568865", "0x28daa90a9d842c3bf00257f985e25efa4019897e64dcf834b955780a436528b5"],
                [["0x15e256bfa2260697a629d16ea76b549d8824085f183ef629154c14b585a4fdd3", "0x126c6bb37810f6d95dc2eeb4c910ce3ec5d3c78a085e67f916be6453720b48cc"], ["0x2dce22f6bd135cc63fe3c223f2d93209d0c05b1917cf34b6841c9aba045dee99", "0x1de3601645452911b04cde2aea2999843ea5a863b0c39c691c0e5a4f16b6216b"]],
                ["0x096efc17542105fd6d7d72e68425975252571a724192282efe813f2011ace881", "0x250b4f441c7c8f7fa1de33f197f84060dc7fa1ba2592e993288bb0ac99c7ad45"],
                ["0x0000000000000000000000000000000000000000000000000000000000000258", "0x0000000000000000000000000000000000000000000000000000000000000001"],
            );
            assert.equal(check_proof_validity, false, "incorrect proof");
        });
    });
});